import{_ as s,c as a,a as t,o as n}from"./app-BVdwvtXU.js";const e="/assets/images/tutorial/navigation/%E7%82%B9%E5%87%BB%E5%AF%BC%E8%88%AA.gif",l="/assets/images/tutorial/navigation/%E7%A2%B0%E6%92%9E%E6%8A%96%E5%8A%A8.gif",p="/assets/images/tutorial/navigation/%E7%A2%B0%E6%92%9E%E5%81%9C%E6%AD%A2%E6%8A%96%E5%8A%A8.gif",h="/assets/images/tutorial/navigation/%E9%81%BF%E9%9A%9C.gif",r="/assets/images/tutorial/navigation/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E5%8C%BA%E5%9F%9F.gif",o="/assets/images/tutorial/navigation/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%83%98%E7%84%99%E5%AF%BC%E8%88%AA%E5%8C%BA%E5%9F%9F.gif",d="/assets/images/tutorial/navigation/TileMapLayer%E6%B7%BB%E5%8A%A0%E5%AF%BC%E8%88%AA%E5%9B%BE%E5%9D%97.png",g={};function k(c,i){return n(),a("div",null,[...i[0]||(i[0]=[t(`<details class="hint-container details"><summary>教程使用环境</summary><ul><li>Godot v4.5.1-stable</li><li>Windows 10</li></ul></details><h2 id="godot导航系统的基本概念和组件" tabindex="-1"><a class="header-anchor" href="#godot导航系统的基本概念和组件"><span>Godot导航系统的基本概念和组件</span></a></h2><h3 id="godot导航系统基本概念" tabindex="-1"><a class="header-anchor" href="#godot导航系统基本概念"><span>Godot导航系统基本概念</span></a></h3><p>当你完成了游戏中的角色控制，可以操作像素小人肆意的奔跑在绿色草地上的时候，也许你会想：为什么我要亲自动手？他能不能自己跑起来？那么好，Godot确实为你这个想法提供了支持，他就是导航系统。</p><p>让一个像素小人从一个点移动到另一个点，听起来一点也不复杂，甚至你完全可以自己编写代码让你的像素小人一格一格移动到目标点。</p><p>实际上导航系统一点也不简单，你需要考虑场景中障碍物位置和可行走区域，确保导航路径生成时能正确避开障碍物，需要考虑计算路径的时间成本，还有动态障碍物、如何便于调试等等问题。</p><p>所以Godot帮我们考虑过了这些事情，我们只需要花几分钟学习如何使用，然后就能轻松的让你的像素小人自动移动起来。</p><h4 id="名词释义" tabindex="-1"><a class="header-anchor" href="#名词释义"><span>名词释义</span></a></h4><ul><li><p><strong>自动寻路</strong>：只给出两个点，让角色自动找到两个点的有效路径</p></li><li><p><strong>烘焙(Bake)</strong>：事先计算好的意思</p></li><li><p><strong>导航代理(NavigationAgent)</strong>：简单理解为“AI的导航员”，帮助角色规划从当前位置到目标点的最优路径，并控制角色沿路径移动，同时避开障碍物</p></li><li><p><strong>导航网格(NavigationMesh)</strong>：定义场景中可行走的区域的“虚拟地图”，由<strong>多边形</strong>组成</p></li><li><p><strong>导航区域(NavigationRegion)</strong>:场景中标记需要生成导航数据的区域，通常包含障碍物和可行走地形</p></li><li><p><strong>A*算法(AStar)</strong>：也叫A星算法，经典寻路算法，通过网格或点连接计算最短路径</p></li><li><p><strong>动态避障(Dynamic Obstacle Avoidance)</strong>：代理在移动中实时避开其他动态物体（如玩家或移动障碍）</p></li><li><p><strong>路径点(PathPoint)</strong>：A*算法中用于连接的可遍历位置，代理通过路径点序列移动</p></li><li><p><strong>代价(Cost)</strong>：路径规划中不同区域的权重（如草地比沼泽更易通行）</p></li></ul><h3 id="godot导航系统核心组件" tabindex="-1"><a class="header-anchor" href="#godot导航系统核心组件"><span>Godot导航系统核心组件</span></a></h3><p>这里列举了Godot官方提供的导航节点，详细的内容和方法可以直接查看官方文档，我们这里只简单讨论一下，侧重示例演示。</p><p>注意：下面列出的4个节点在当前版本被标记为实验性，也就是说他有可能在将来的版本改动或者弃用，请考虑清楚后使用。</p><h4 id="navigationagent2d节点" tabindex="-1"><a class="header-anchor" href="#navigationagent2d节点"><span>NavigationAgent2D节点</span></a></h4><p>用于寻路至某个位置并且能够躲避障碍物的 2D 代理。</p><p>通常情况下，对需要根据导航移动的精灵节点添加上这个节点，就可以实现自动寻路逻辑了</p><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CharacterBody2D</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@onready</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> navigation_agent_2d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NavigationAgent2D</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> $</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">NavigationAgent2D</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SPEED</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 300.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _physics_process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">_delta</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-&gt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dir</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get_nav_dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# 没有目的地</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> not </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# 已经到目的地附近</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> navigation_agent_2d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">is_navigation_finished</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		velocity</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Vector2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ZERO</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		move_and_slide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	velocity</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dir</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SPEED</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	move_and_slide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将点击的位置传入导航代理，并将获取到的下一个移动节点转本地坐标</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get_nav_dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> not </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clickPosition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	navigation_agent_2d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">target_position</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> clickPosition</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> to_local</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">navigation_agent_2d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get_next_path_position</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">normalized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图：<br><img src="`+e+'" alt="点击导航" loading="lazy"></p><p>需要注意的是，追击的时候如果单位碰撞范围&gt;target_desired_distance，会导致单位永远到不了目的地,然后抖动<br> 如图：<br><img src="'+l+'" alt="碰撞抖动" loading="lazy"></p><p>当正确设置好碰撞范围，则不会出现抖动的情况<br> 如图：<br><img src="'+p+'" alt="碰撞停止抖动" loading="lazy"></p><h4 id="navigationobstacle2d节点" tabindex="-1"><a class="header-anchor" href="#navigationobstacle2d节点"><span>NavigationObstacle2D节点</span></a></h4><p>用于导航的 2D 障碍物，能够影响导航网格的烘焙、约束启用了避障处理的代理的速度。</p><p>简单来说就是这个节点可以为当前的障碍物添加一个更大范围的碰撞，代理移动的时候会被这个大一些的碰撞体阻挡住。<br> 如图：<br><img src="'+h+'" alt="避障" loading="lazy"></p><h4 id="navigationregion2d节点" tabindex="-1"><a class="header-anchor" href="#navigationregion2d节点"><span>NavigationRegion2D节点</span></a></h4><p>可达的 2D 地区，NavigationAgent2D 能够将其用于寻路。</p><ul><li><p>可以自定义一个导航区域<br> 如图：<br><img src="'+r+'" alt="自定义导航区域" loading="lazy"></p></li><li><p>根据障碍物自动烘焙可导航区域<br> 创建导航区域后，设置source_geometry_mode为Group Expicit，然后复制source_geometry_group_name中的值新建一个分组，将指定障碍物图层设置到这个分组下，就可以进行自动烘焙了<br> 如图：<br><img src="'+o+'" alt="自定义烘焙导航区域" loading="lazy"></p></li></ul><div class="hint-container info"><p class="hint-container-title">注意</p><p>需要烘焙的那个障碍物图层如果是手动设置的物理层，需要注意多个图块尽可能连接准确，如果出现不同图块物理层连接错位，有可能导致最终烘焙的导航区域出现重合的边发生错误</p></div><ul><li>TileMapLayer设置TileSet资源的时候也可以新增导航区域，这时只要把图块放到游戏中，指定的图块就自动设置为导航区域了<br> 如图：<br><img src="'+d+'" alt="TileMapLayer添加导航图块" loading="lazy"></li></ul><h4 id="navigationlink2d节点" tabindex="-1"><a class="header-anchor" href="#navigationlink2d节点"><span>NavigationLink2D节点</span></a></h4><p>暂无说明</p><h2 id="a-算法" tabindex="-1"><a class="header-anchor" href="#a-算法"><span>A*算法</span></a></h2><p>本教程主要是介绍Godot中内置的算法类</p><h3 id="a-算法简介" tabindex="-1"><a class="header-anchor" href="#a-算法简介"><span>A*算法简介</span></a></h3><p>A*算法由Peter Hart、Nils Nilsson和Bertram Raphael于1968年提出，最初用于解决图搜索问题。其设计灵感来源于Dijkstra算法和启发式搜索的结合，通过引入启发式函数（如曼哈顿距离）显著提升了搜索效率。该算法在早期人工智能和机器人导航领域得到验证，后逐渐成为路径规划的经典方法。</p><p>在Godot中A*算法主要用于NPC寻路、动态障碍物避让等场景。</p><p>他的优势是提供一个启发函数，（比如曼哈顿距离）估算当前节点到目标的“直线距离”，算法总是优先计算“实际已走距离+直线距离”总和最小的节点。简单来说就是不会绕路。这点相比Dijkstra算法全搜索最少提升30%的效率。并且支持自定义代价函数，可以适应不同的地形，例如：高地地形比平原地形难走，可以通过自定义代价函数来实现。<br> 当然，A*算法的局限性也在启发函数上，就像你用现实生活中的导航软件，导航有时候会给你导航到一条看似近的路，实际上路上在封路施工，导致你最终绕更远的路，这或许就是所谓成也萧何败萧何，在使用的时候如果遇到性能下降的情况，可以考虑是否是启发函数的问题，我们这里暂时就不做深入讨论了。</p><h3 id="godot4内置的a-算法" tabindex="-1"><a class="header-anchor" href="#godot4内置的a-算法"><span>Godot4内置的A*算法</span></a></h3><h4 id="astar2d" tabindex="-1"><a class="header-anchor" href="#astar2d"><span>AStar2D</span></a></h4><p>用于在二维空间的连通图中，寻找两个顶点之间的最短路径。</p><p>需要手动添加路径点，并且建立点的连接。这个类适用任何类型的图形（四边形，六边形等）。当然，如果你的游戏是六边形网格，也有相应的插件提供导航功能，例如：AStarHexGrid2D，这不在本次教程的讨论范围，感兴趣的可以自行学习。</p><h4 id="astargrid2d" tabindex="-1"><a class="header-anchor" href="#astargrid2d"><span>AStarGrid2D</span></a></h4><p>AStarGrid2D 是 AStar2D 的变种，针对疏松 2D 网格进行了优化。因为不需要手动创建点并进行连接，所以用起来更加简单。这个类还支持使用不同的启发方法、斜向移动模式、跳跃模式，从而加速运算。</p><p>相对于AStar2D，他是一个矩形网格，限制了网格的点有4个相邻点，可以直接用于矩形网格游戏导航。</p><p>只需提供导航区域、单元格大小。其他内容引擎会自行处理。</p><h3 id="本教程所用工程文件" tabindex="-1"><a class="header-anchor" href="#本教程所用工程文件"><span>本教程所用工程文件</span></a></h3><p><a href="https://github.com/JessieLR/Godot_Navigation/tree/main" target="_blank" rel="noopener noreferrer">Github仓库地址</a></p>',45)])])}const y=s(g,[["render",k]]),v=JSON.parse('{"path":"/tutorial/navigation.html","title":"导航系统以及A星算法","lang":"zh-CN","frontmatter":{"title":"导航系统以及A星算法","sticky":false,"star":false,"author":"玄溟","category":["教程"],"tag":["功能教程"],"date":"2025-10-13T00:00:00.000Z","description":"教程使用环境 Godot v4.5.1-stable Windows 10 Godot导航系统的基本概念和组件 Godot导航系统基本概念 当你完成了游戏中的角色控制，可以操作像素小人肆意的奔跑在绿色草地上的时候，也许你会想：为什么我要亲自动手？他能不能自己跑起来？那么好，Godot确实为你这个想法提供了支持，他就是导航系统。 让一个像素小人从一个点移...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"导航系统以及A星算法\\",\\"image\\":[\\"https://godotvillage.github.io/assets/images/tutorial/navigation/点击导航.gif\\",\\"https://godotvillage.github.io/assets/images/tutorial/navigation/碰撞抖动.gif\\",\\"https://godotvillage.github.io/assets/images/tutorial/navigation/碰撞停止抖动.gif\\",\\"https://godotvillage.github.io/assets/images/tutorial/navigation/避障.gif\\",\\"https://godotvillage.github.io/assets/images/tutorial/navigation/自定义导航区域.gif\\",\\"https://godotvillage.github.io/assets/images/tutorial/navigation/自定义烘焙导航区域.gif\\",\\"https://godotvillage.github.io/assets/images/tutorial/navigation/TileMapLayer添加导航图块.png\\"],\\"datePublished\\":\\"2025-10-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-23T02:51:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"玄溟\\"}]}"],["meta",{"property":"og:url","content":"https://godotvillage.github.io/tutorial/navigation.html"}],["meta",{"property":"og:site_name","content":"Godot新手村"}],["meta",{"property":"og:title","content":"导航系统以及A星算法"}],["meta",{"property":"og:description","content":"教程使用环境 Godot v4.5.1-stable Windows 10 Godot导航系统的基本概念和组件 Godot导航系统基本概念 当你完成了游戏中的角色控制，可以操作像素小人肆意的奔跑在绿色草地上的时候，也许你会想：为什么我要亲自动手？他能不能自己跑起来？那么好，Godot确实为你这个想法提供了支持，他就是导航系统。 让一个像素小人从一个点移..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://godotvillage.github.io/assets/images/tutorial/navigation/点击导航.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-23T02:51:45.000Z"}],["meta",{"property":"article:author","content":"玄溟"}],["meta",{"property":"article:tag","content":"功能教程"}],["meta",{"property":"article:published_time","content":"2025-10-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-23T02:51:45.000Z"}]]},"git":{"createdTime":1761187905000,"updatedTime":1761187905000,"contributors":[{"name":"moshangzhu","username":"moshangzhu","email":"925236118@qq.com","commits":1,"url":"https://github.com/moshangzhu"}]},"readingTime":{"minutes":6.76,"words":2029},"filePathRelative":"tutorial/navigation.md","excerpt":"<details class=\\"hint-container details\\"><summary>教程使用环境</summary>\\n<ul>\\n<li>Godot v4.5.1-stable</li>\\n<li>Windows 10</li>\\n</ul>\\n</details>\\n<h2>Godot导航系统的基本概念和组件</h2>\\n<h3>Godot导航系统基本概念</h3>\\n<p>当你完成了游戏中的角色控制，可以操作像素小人肆意的奔跑在绿色草地上的时候，也许你会想：为什么我要亲自动手？他能不能自己跑起来？那么好，Godot确实为你这个想法提供了支持，他就是导航系统。</p>\\n<p>让一个像素小人从一个点移动到另一个点，听起来一点也不复杂，甚至你完全可以自己编写代码让你的像素小人一格一格移动到目标点。</p>","autoDesc":true}');export{y as comp,v as data};
