import{_ as a,c as o,d as t,e as r,a as n,f as i,o as s}from"./app-DDR52eiE.js";const l={};function d(h,e){return s(),o("div",null,[e[0]||(e[0]=t("details",{class:"hint-container details"},[t("summary",null,"链接"),t("p",null,[i("着色器相关文档："),t("a",{href:"https://docs.godotengine.org/zh-cn/4.x/tutorials/shaders/introduction_to_shaders.html#",target:"_blank",rel:"noopener noreferrer"},"Godot文档-着色器简介")])],-1)),e[1]||(e[1]=t("h2",{id:"什么是着色器",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#什么是着色器"},[t("span",null,"什么是着色器")])],-1)),e[2]||(e[2]=t("p",null,"着色器是一段程序。借助强大的并行计算能力，计算机显卡可以在每次渲染帧中为纹理的每一个像素调用一次着色器程序，并生成新的纹理。",-1)),e[3]||(e[3]=t("p",null,"由于是并行运行的程序，所以每一个像素并不知道相邻像素的执行结果。也没有办法将每次执行的结果存储起来传给下一次运行。",-1)),r(" more "),e[4]||(e[4]=n('<h2 id="着色器程序" tabindex="-1"><a class="header-anchor" href="#着色器程序"><span>着色器程序</span></a></h2><h3 id="着色器类型" tabindex="-1"><a class="header-anchor" href="#着色器类型"><span>着色器类型</span></a></h3><p>程序的第一行通常是着色器类型。类似<code>shader_type spatial;</code><br> 着色器程序分为5种类型。不同类型的着色器有不同的处理函数。我们会在不同的章节详细讲解。</p><ul><li>2D（<code>canvas_item</code>）</li><li>3D（<code>spatial</code>）</li><li>粒子（<code>particles</code>）</li><li>天空（<code>sky</code>）</li><li>雾（<code>fog</code>）</li></ul><h3 id="着色器渲染模式" tabindex="-1"><a class="header-anchor" href="#着色器渲染模式"><span>着色器渲染模式</span></a></h3><p>着色器渲染模式通常作为程序的第二行，渲染模式会修改 Godot 应用着色器的方式。不同的渲染方式往往会达到不同的效果。</p><p>每个类型的着色器的渲染模式都不尽相同，同着色器类型一样，我们会在不同的章节详细讲解。</p><h3 id="着色器语言" tabindex="-1"><a class="header-anchor" href="#着色器语言"><span>着色器语言</span></a></h3><p>Godot着色器使用的是gdshader语言，是一种基于GLSL简化后的语言。Godot官方提供了转换的方法：<a href="https://docs.godotengine.org/zh-cn/4.x/tutorials/shaders/converting_glsl_to_godot_shaders.html#doc-converting-glsl-to-godot-shaders" target="_blank" rel="noopener noreferrer">Godot文档-着色器迁移指南</a>。此处不赘述。</p><p>由于显卡需要快速的执行程序，所以代码风格比较严格，需要注意的点有：</p><ul><li>语句需要以分号(<code>;</code>)结尾。</li><li>小数不可以写作整数的格式。类似<code>1.0</code>不可以写作<code>1</code>，必须要带有<code>.0</code>。</li><li>程序块需要添加大括号</li></ul><p>由于着色器语法较多，单独作为一篇文章讲解。</p><h2 id="着色器能做什么" tabindex="-1"><a class="header-anchor" href="#着色器能做什么"><span>着色器能做什么</span></a></h2><p>着色器能够为游戏创造出丰富的视觉效果：</p><ul><li>材质效果：金属、玻璃、布料等材质渲染</li><li>光照阴影：真实光照计算和动态阴影</li><li>动画效果：顶点动画、纹理流动、时间驱动动画</li><li>特殊效果：粒子系统、溶解、全息、扭曲等</li><li>后处理：景深、模糊、色调映射等屏幕效果</li><li>性能优化：LOD、剔除、批处理等优化技术</li></ul><h2 id="着色器获取" tabindex="-1"><a class="header-anchor" href="#着色器获取"><span>着色器获取</span></a></h2><p>除了自己编写程序以外，也可以直接在网上获取已经写好的shader。</p><h3 id="godot-shaders" tabindex="-1"><a class="header-anchor" href="#godot-shaders"><span>Godot Shaders</span></a></h3><p><a href="https://godotshaders.com/" target="_blank" rel="noopener noreferrer">Godot Shaders</a> 是专门为 Godot 设计的着色器库，可以直接使用。</p><ul><li>社区驱动的着色器资源库</li><li>包含材质、动画、后处理等各种效果</li><li>无需修改，直接下载使用</li></ul><h3 id="shadertoy" tabindex="-1"><a class="header-anchor" href="#shadertoy"><span>Shadertoy</span></a></h3><p><a href="https://www.shadertoy.com/" target="_blank" rel="noopener noreferrer">Shadertoy</a> 是全球最大的 GLSL 着色器平台，需要迁移到 Godot 格式。</p><ul><li>海量的 GLSL 着色器示例</li><li>实时预览效果</li><li>包含各种创意和艺术效果</li></ul><p>迁移方法参考：<a href="https://docs.godotengine.org/zh-cn/4.x/tutorials/shaders/converting_glsl_to_godot_shaders.html" target="_blank" rel="noopener noreferrer">Godot 着色器迁移指南</a></p><h2 id="额外学习" tabindex="-1"><a class="header-anchor" href="#额外学习"><span>额外学习</span></a></h2><h3 id="the-book-of-shaders" tabindex="-1"><a class="header-anchor" href="#the-book-of-shaders"><span>The Book of Shaders</span></a></h3><p><a href="https://thebookofshaders.com/?lan=ch" target="_blank" rel="noopener noreferrer">The Book of Shaders</a> 是学习片段着色器的经典教程。</p><ul><li>从基础概念到高级技巧的完整学习路径</li><li>包含大量交互式示例</li><li>涵盖算法绘画、生成设计、图像处理等主题</li><li>提供中文版本，便于学习</li></ul><h3 id="dx11龙书" tabindex="-1"><a class="header-anchor" href="#dx11龙书"><span>DX11龙书</span></a></h3><p>《Introduction to 3D Game Programming with DirectX 11》是游戏编程的经典教材，群文件内可下载学习。</p><ul><li>深入讲解3D游戏编程原理</li><li>包含大量着色器实现细节</li><li>适合进阶学习使用</li></ul>',31))])}const c=a(l,[["render",d]]),m=JSON.parse('{"path":"/tutorial/shader/intro.html","title":"着色器简介","lang":"zh-CN","frontmatter":{"title":"着色器简介","author":"Moshangzhu","date":"2025-10-15T00:00:00.000Z","category":["教程"],"tag":["着色器"],"description":"链接 着色器相关文档：Godot文档-着色器简介 什么是着色器 着色器是一段程序。借助强大的并行计算能力，计算机显卡可以在每次渲染帧中为纹理的每一个像素调用一次着色器程序，并生成新的纹理。 由于是并行运行的程序，所以每一个像素并不知道相邻像素的执行结果。也没有办法将每次执行的结果存储起来传给下一次运行。","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"着色器简介\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-15T15:36:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Moshangzhu\\"}]}"],["meta",{"property":"og:url","content":"https://godotvillage.github.io/tutorial/shader/intro.html"}],["meta",{"property":"og:site_name","content":"Godot新手村"}],["meta",{"property":"og:title","content":"着色器简介"}],["meta",{"property":"og:description","content":"链接 着色器相关文档：Godot文档-着色器简介 什么是着色器 着色器是一段程序。借助强大的并行计算能力，计算机显卡可以在每次渲染帧中为纹理的每一个像素调用一次着色器程序，并生成新的纹理。 由于是并行运行的程序，所以每一个像素并不知道相邻像素的执行结果。也没有办法将每次执行的结果存储起来传给下一次运行。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-15T15:36:35.000Z"}],["meta",{"property":"article:author","content":"Moshangzhu"}],["meta",{"property":"article:tag","content":"着色器"}],["meta",{"property":"article:published_time","content":"2025-10-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-15T15:36:35.000Z"}]]},"git":{"createdTime":1760542595000,"updatedTime":1760542595000,"contributors":[{"name":"moshangzhu","username":"moshangzhu","email":"925236118@qq.com","commits":1,"url":"https://github.com/moshangzhu"}]},"readingTime":{"minutes":3.04,"words":911},"filePathRelative":"tutorial/shader/intro.md","excerpt":"<details class=\\"hint-container details\\"><summary>链接</summary>\\n<p>着色器相关文档：<a href=\\"https://docs.godotengine.org/zh-cn/4.x/tutorials/shaders/introduction_to_shaders.html#\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Godot文档-着色器简介</a></p>\\n</details>\\n<h2>什么是着色器</h2>\\n<p>着色器是一段程序。借助强大的并行计算能力，计算机显卡可以在每次渲染帧中为纹理的每一个像素调用一次着色器程序，并生成新的纹理。</p>\\n<p>由于是并行运行的程序，所以每一个像素并不知道相邻像素的执行结果。也没有办法将每次执行的结果存储起来传给下一次运行。</p>\\n","autoDesc":true}');export{c as comp,m as data};
