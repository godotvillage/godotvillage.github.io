import{_ as o,c as n,a as e,e as a,o as r}from"./app-x0uw43Ul.js";const s={};function i(p,t){return r(),n("div",null,[t[0]||(t[0]=e('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>想象一下这样的场景：你的玩家在游戏中辛辛苦苦打了三个小时，终于攒够了装备、升到了满级、解锁了所有成就。但当他们关闭游戏再次打开时，却发现一切从头开始——所有的进度都消失了，就像从未玩过一样。</p><p>或者你想制作一款剧情丰富的RPG游戏，玩家的每个选择都会影响后续的故事走向。但如果没有存档系统，玩家就必须一口气通关，否则所有的选择和进度都会丢失。</p><p>再比如，你想让玩家自定义游戏设置——音量大小、画质选项、按键绑定。如果这些设置无法保存，每次启动游戏都要重新调整，这会让玩家非常抓狂。</p><p>那么，如何让这些珍贵的游戏数据在关闭游戏后依然保留呢？</p><p>答案是<strong>文件读写与存档系统</strong>。</p><p>在现代游戏开发中，存档系统是几乎所有类型游戏的必备功能。无论是RPG的进度保存、动作游戏的检查点、还是简单的设置保存，都离不开文件读写操作。</p><p>在Godot中，我们有多种方式来实现文件的读写和数据持久化——<strong>ConfigFile</strong>、<strong>JSON</strong>、<strong>二进制文件</strong>、<strong>资源文件</strong>、<strong>数据库</strong>等。每种方式都有其适用场景。</p>',8)),a(" more "),t[1]||(t[1]=e('<div class="hint-container info"><p class="hint-container-title">数据持久化</p><p>数据持久化是指将程序运行时产生的数据保存到硬盘等存储介质上，使得数据在程序关闭后仍然存在，下次启动时可以重新加载。</p><p>在游戏开发中，常见的需要持久化的数据包括：</p><ul><li><strong>游戏进度</strong>：玩家的关卡进度、任务完成情况、收集品状态</li><li><strong>角色数据</strong>：等级、经验值、装备、技能、属性</li><li><strong>游戏设置</strong>：音量、画质、按键绑定、语言选择</li><li><strong>统计数据</strong>：游戏时长、击败敌人数、死亡次数、成就解锁</li></ul><p>选择合适的存档方式不仅能提升玩家体验，还能防止作弊、保护数据安全。</p></div><h2 id="godot中的五种数据持久化方式" tabindex="-1"><a class="header-anchor" href="#godot中的五种数据持久化方式"><span>Godot中的五种数据持久化方式</span></a></h2><h3 id="使用configfile保存配置" tabindex="-1"><a class="header-anchor" href="#使用configfile保存配置"><span>使用ConfigFile保存配置</span></a></h3><h3 id="使用json保存游戏数据" tabindex="-1"><a class="header-anchor" href="#使用json保存游戏数据"><span>使用JSON保存游戏数据</span></a></h3><h3 id="使用二进制文件保存数据" tabindex="-1"><a class="header-anchor" href="#使用二进制文件保存数据"><span>使用二进制文件保存数据</span></a></h3><h3 id="使用resource资源文件保存数据" tabindex="-1"><a class="header-anchor" href="#使用resource资源文件保存数据"><span>使用Resource资源文件保存数据</span></a></h3><h3 id="使用sqlite数据库保存数据" tabindex="-1"><a class="header-anchor" href="#使用sqlite数据库保存数据"><span>使用SQLite数据库保存数据</span></a></h3><h2 id="dlc-和-mod" tabindex="-1"><a class="header-anchor" href="#dlc-和-mod"><span>DLC 和 MOD</span></a></h2>',8))])}const c=o(s,[["render",i]]),l=JSON.parse('{"path":"/tutorial/file.html","title":"文件读写与存档系统","lang":"zh-CN","frontmatter":{"title":"文件读写与存档系统","author":"Moshangzhu","date":"2025-10-18T00:00:00.000Z","category":["教程"],"tag":["文件","未完成"],"description":"简介 想象一下这样的场景：你的玩家在游戏中辛辛苦苦打了三个小时，终于攒够了装备、升到了满级、解锁了所有成就。但当他们关闭游戏再次打开时，却发现一切从头开始——所有的进度都消失了，就像从未玩过一样。 或者你想制作一款剧情丰富的RPG游戏，玩家的每个选择都会影响后续的故事走向。但如果没有存档系统，玩家就必须一口气通关，否则所有的选择和进度都会丢失。 再比如...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文件读写与存档系统\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-19T09:32:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Moshangzhu\\"}]}"],["meta",{"property":"og:url","content":"https://godotvillage.github.io/tutorial/file.html"}],["meta",{"property":"og:site_name","content":"Godot新手村"}],["meta",{"property":"og:title","content":"文件读写与存档系统"}],["meta",{"property":"og:description","content":"简介 想象一下这样的场景：你的玩家在游戏中辛辛苦苦打了三个小时，终于攒够了装备、升到了满级、解锁了所有成就。但当他们关闭游戏再次打开时，却发现一切从头开始——所有的进度都消失了，就像从未玩过一样。 或者你想制作一款剧情丰富的RPG游戏，玩家的每个选择都会影响后续的故事走向。但如果没有存档系统，玩家就必须一口气通关，否则所有的选择和进度都会丢失。 再比如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-19T09:32:32.000Z"}],["meta",{"property":"article:author","content":"Moshangzhu"}],["meta",{"property":"article:tag","content":"未完成"}],["meta",{"property":"article:tag","content":"文件"}],["meta",{"property":"article:published_time","content":"2025-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-19T09:32:32.000Z"}]]},"git":{"createdTime":1760866352000,"updatedTime":1760866352000,"contributors":[{"name":"moshangzhu","username":"moshangzhu","email":"925236118@qq.com","commits":1,"url":"https://github.com/moshangzhu"}]},"readingTime":{"minutes":2.11,"words":633},"filePathRelative":"tutorial/file.md","excerpt":"<h2>简介</h2>\\n<p>想象一下这样的场景：你的玩家在游戏中辛辛苦苦打了三个小时，终于攒够了装备、升到了满级、解锁了所有成就。但当他们关闭游戏再次打开时，却发现一切从头开始——所有的进度都消失了，就像从未玩过一样。</p>\\n<p>或者你想制作一款剧情丰富的RPG游戏，玩家的每个选择都会影响后续的故事走向。但如果没有存档系统，玩家就必须一口气通关，否则所有的选择和进度都会丢失。</p>\\n<p>再比如，你想让玩家自定义游戏设置——音量大小、画质选项、按键绑定。如果这些设置无法保存，每次启动游戏都要重新调整，这会让玩家非常抓狂。</p>\\n<p>那么，如何让这些珍贵的游戏数据在关闭游戏后依然保留呢？</p>\\n<p>答案是<strong>文件读写与存档系统</strong>。</p>\\n<p>在现代游戏开发中，存档系统是几乎所有类型游戏的必备功能。无论是RPG的进度保存、动作游戏的检查点、还是简单的设置保存，都离不开文件读写操作。</p>\\n<p>在Godot中，我们有多种方式来实现文件的读写和数据持久化——<strong>ConfigFile</strong>、<strong>JSON</strong>、<strong>二进制文件</strong>、<strong>资源文件</strong>、<strong>数据库</strong>等。每种方式都有其适用场景。</p>\\n","autoDesc":true}');export{c as comp,l as data};
