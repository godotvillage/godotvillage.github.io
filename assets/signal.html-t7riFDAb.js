import{_ as a,c as n,a as s,e as l,o as e}from"./app-BGeEgexs.js";const t="/assets/images/tutorial/signal/signal_connect_in_editor.png",h="/assets/images/tutorial/signal/signal_flags_in_editor.png",k={};function p(d,i){return e(),n("div",null,[i[0]||(i[0]=s('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在开发游戏的过程中，往往会出现这样的情况：</p><ul><li>玩家受到伤害，需要让血量条发生变化</li><li>动画播放结束了，需要用代码控制播放下一个动画</li><li>要设置机关，当玩家触碰后激活某处机关</li></ul><p>我们可能会有以下思路：</p><ul><li>先获得到需要触发变化的节点，然后调用节点上的函数，例如第一种情况在玩家脚本中：<code>get_node(&quot;hp_bar&quot;).update_value(hp_value)</code></li><li>先通知父级节点，然后再想办法通知到对应的节点处理，例如第一种情况在玩家脚本中：<code>get_parent().do_something(hp_value)</code></li><li>先把自己存放再需要变化的节点的属性里，然后每帧根据玩家的属性，例如第一种情况在玩家脚本中：<code>hp_bar.player = self</code>，然后在血量的process函数中<code>update_value(player.hp_value)</code></li></ul><p>很容易发现以上代码中，传输数据是一件很不方便的事情。尤其是我们不可能将所有代码全部放在一个庞大的<code>game.tscn</code>场景文件中，这使得节点之间的交互更是一件复杂的事情。</p><p>那有什么办法可以简化这种操作呢？或者说，如何将一个事件，和处理这个事件的函数解绑呢？</p><p>答案是<strong>信号</strong><code>signal</code>。</p>',8)),l(" more "),i[1]||(i[1]=s(`<div class="hint-container info"><p class="hint-container-title">信号机制</p><p>在别的语境里，信号通常是事件监听、事件委托、观察者模式、订阅者模式等名词。<br> 在代码中可以声明一个事件，然后将需要处理事件的行为维护成一个数组。当发生这个事件时，就会遍历调用这些行为函数。（观察者模式）<br> 或者在一个第三方的位置，设置一个事件。事件可以由事件发布者发布，再由中介者发布给所有的订阅者。（订阅者模式）<br> 而这些，在Godot中就被封装成了信号系统。</p></div><h2 id="在godot中使用信号" tabindex="-1"><a class="header-anchor" href="#在godot中使用信号"><span>在Godot中使用信号</span></a></h2><h3 id="godot中的signal类" tabindex="-1"><a class="header-anchor" href="#godot中的signal类"><span>Godot中的Signal类</span></a></h3><p>Godot中的信号是一种常量。类型是Signal。我们并不需要关心他的值是什么。只需要了解信号的几个重要的函数。</p><p>可以用以下方式方便的定义信号。</p><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义一个叫some_sig的信号</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">signal</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> some_sig</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义一个带有两个参数的信号</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">signal</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> other_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">param_a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">param_b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绑定信号的方法也很简单，只需要让信号链接到一个Callable类型的变量上：</p><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将some_sig信号链接到一个名为_handle_func的函数上。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将other_sig信号链接到一个名为_handle_func_with_params的有参数的函数上。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 因为信号和函数的参数一致，所以无需特殊处理</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">other_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func_with_params</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将some_sig信号链接到_handle_func_with_params并传入参数。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 由于some_sig无法提供_handle_func_with_params需要的两个参数，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 所以使用bind为_handle_func_with_params绑定两个固定的参数生成一个新的Callable。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func_with_params</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;来自some_sig的固定参数&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _handle_func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;触发无参数函数&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _handle_func_with_params</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">param_a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">param_b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;触发有参数函数: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> %s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">param_a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">param_b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Callable与bind</summary><p><strong>Callable</strong><br><code>Callable</code>是一种变量类型，指的是可以被调用的函数。使用<code>func</code>关键字声明的具名函数和匿名函数都是<code>Callable</code>类型的变量。<br> 例如上文中的：</p><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _handle_func_with_params</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">param_a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">param_b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;触发有参数函数: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> %s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">param_a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">param_b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_handle_func_with_params</code>就是一个<code>Callable</code>类型。</p><p>信号可以与<code>Callable</code>类型链接。所以在<code>Signal.connect</code>函数中传入类似<code>_handle_func_with_params</code>的函数名即可。</p><p><strong>bind</strong><br> bind可以返回一个函数的副本，并为其绑定一个或多个固定的参数。<br> 例如上文中的：</p><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func_with_params</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;来自some_sig的固定参数&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>是调用了<code>_handle_func_with_params</code>这个<code>Callable</code>变量上的<code>bind</code>方法。返回了一个新的<code>Callable</code>类型的变量。<strong>这个变量和原来的函数不是一个值。</strong><br> 返回的副本被<code>bind</code>函数绑定了两个固定的值，所以再使用无参数的信号连接时，就不会出现问题。</p></details><p>触发信号可以使用信号的emit函数。如果信号带有参数，也可以在emit函数中传参。</p><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 触发无参数信号</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 触发有参数信号并传参</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">other_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;触发信号&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了以上的内容，我们就可以声明并使用信号了。</p><p>在编辑器中，则可以选择一个带有信号的节点，在界面右侧检查旁找到节点面板，选择信号面板，双击想要连接的信号，然后在弹出的连接信号面板中选择一个处理信号的脚本，并选取或新建一个处理方法。点击连接按钮后即可将信号连接到方法。<br><img src="`+t+`" alt="" loading="lazy"></p><h3 id="变体写法" tabindex="-1"><a class="header-anchor" href="#变体写法"><span>变体写法</span></a></h3><p>除了上述的信号链接方法，Godot还提供了另一种写法。我们可以通过节点的<code>connect</code>函数来链接信号：</p><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用字符串形式的信号名称来链接信号</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;some_sig&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这种写法和<code>some_sig.connect(_handle_func)</code>的效果是一样的。区别在于：</p><ul><li>前者使用字符串<code>&quot;some_sig&quot;</code>来指定信号名称</li><li>后者直接使用信号常量<code>some_sig</code>本身</li></ul><p>使用字符串形式的好处是可以动态地指定信号名称，但缺点是容易因为拼写错误导致问题，且IDE无法提供代码补全和类型检查。因此在大多数情况下，推荐使用直接访问信号常量的方式。</p><h3 id="信号标志" tabindex="-1"><a class="header-anchor" href="#信号标志"><span>信号标志</span></a></h3><p>在链接信号时，我们可以传入一个可选的标志参数，来控制信号的特殊行为。这些标志定义在<code>Object.ConnectFlags</code>枚举中。</p><p>使用方式如下：</p><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 连接信号时传入标志参数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CONNECT_ONE_SHOT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Godot提供了以下几种信号标志：</p><h4 id="延迟触发-connect-deferred" tabindex="-1"><a class="header-anchor" href="#延迟触发-connect-deferred"><span>延迟触发 CONNECT_DEFERRED</span></a></h4><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CONNECT_DEFERRED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用延迟标志后，信号触发时不会立即调用函数，而是等到当前帧的末尾（空闲时）才触发。这在某些需要等待所有逻辑执行完毕后再处理的场景中很有用。</p><h4 id="一次性连接-connect-one-shot" tabindex="-1"><a class="header-anchor" href="#一次性连接-connect-one-shot"><span>一次性连接 CONNECT_ONE_SHOT</span></a></h4><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CONNECT_ONE_SHOT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一次性连接会在第一次触发后自动断开，不需要手动调用<code>disconnect</code>。适合只需要响应一次的事件，例如游戏开始时的初始化信号。</p><h4 id="持久连接-connect-persist" tabindex="-1"><a class="header-anchor" href="#持久连接-connect-persist"><span>持久连接 CONNECT_PERSIST</span></a></h4><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CONNECT_PERSIST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>持久连接会在场景保存时一起被序列化存储。在编辑器中通过&quot;节点&quot;面板手动创建的信号连接默认就是持久的。这意味着场景加载时，这些连接会自动恢复。</p><h4 id="引用计数-connect-reference-counted" tabindex="-1"><a class="header-anchor" href="#引用计数-connect-reference-counted"><span>引用计数 CONNECT_REFERENCE_COUNTED</span></a></h4><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CONNECT_REFERENCE_COUNTED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>允许同一个信号和函数多次建立连接，每次连接都会增加内部计数器。每当触发一次就会减少一次计数，当全部计数都触发后，即完全断开连接。需要调用相同次数的<code>disconnect</code>才能完全断开连接。</p><h4 id="追加源对象-connect-append-source-object" tabindex="-1"><a class="header-anchor" href="#追加源对象-connect-append-source-object"><span>追加源对象 CONNECT_APPEND_SOURCE_OBJECT</span></a></h4><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CONNECT_APPEND_SOURCE_OBJECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>实例化场景时，会自动将发出信号的对象追加到回调函数的参数末尾。这在需要知道信号来源的场景中很有用。</p><p>部分信号标志可以在Godot编辑器的信号连接窗口中选择（需要勾选高级按钮）：<br><img src="`+h+`" alt="" loading="lazy"></p><div class="hint-container tip"><p class="hint-container-title">组合使用标志</p><p>多个标志可以使用按位或运算符<code>|</code>组合使用：</p><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CONNECT_DEFERRED</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> |</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CONNECT_ONE_SHOT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><h3 id="断开信号" tabindex="-1"><a class="header-anchor" href="#断开信号"><span>断开信号</span></a></h3><p>当不再需要响应某个信号时，可以使用<code>disconnect</code>函数断开连接：</p><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 断开信号连接</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">some_sig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">disconnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>断开信号连接在节点被删除或功能被禁用时很有必要，可以避免触发已经失效的函数。</p><h2 id="全局事件总线" tabindex="-1"><a class="header-anchor" href="#全局事件总线"><span>全局事件总线</span></a></h2><p>如果你已经过一段游戏开发经验了，会发现在使用信号时总会有些麻烦：在使用某个节点的信号时需要先想办法获取到这个节点，然后才能通过节点连接信号处理事件。可不可以用一种方法能更方便的使用信号呢？</p><p>全局事件总线是一个依赖于自动加载的统一管理信号的架构方式。它作为一个完全独立，又可以在任何地方轻易的访问，且全局唯一（单例）的节点，可以作为一个事件转发的枢纽。</p><p>我们可以在一个自动加载的脚本中，新建一些信号，然后事件触发方直接触发全局脚本上的信号，事件接收方则将处理函数连接在全局脚本的信号上。这样两个节点不需要知道对方是否存在以及所在的位置，只需要关心事件是否被触发以及触发后的逻辑。减少了项目上场景与场景之间的依赖，实现了解耦的目的。</p><p>以下是一个全局事件总线的示例：</p><div class="language-gdscript line-numbers-mode" data-highlighter="shiki" data-ext="gdscript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-gdscript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># event_bus.gd</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 自动加载，名称为EventBus</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Node</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">signal</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> player_hp_changed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">hp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># player.gd</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 玩家脚本</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class_name</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Player</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CharacterBody2D</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> max_hp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hurt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">damage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 玩家受伤，扣除血量</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    hp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> clamp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> damage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">max_hp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 血量变化，发送信号</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    EventBus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">player_hp_changed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># game_manager.gd</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 游戏控制器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class_name</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GameManager</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Node</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _ready</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 连接玩家血量变化信号</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    EventBus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">player_hp_changed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_player_hp_changed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _handle_player_hp_changed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">player_hp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 判断玩家血量是否为0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> player_hp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        game_over</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> game_over</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 退出游戏</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    get_tree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">quit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ui.gd</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 游戏UI</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Control</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 进度条节点，用来展示玩家血量</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@onready</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> player_hp_progress_bar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ProgressBar</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> %</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">PlayerHpProgressBar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> player_hp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _ready</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 连接玩家血量变化信号</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    EventBus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">player_hp_changed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_handle_player_hp_changed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 血量变化后更新ui</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _handle_player_hp_changed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">current_player_hp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    player_hp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> current_player_hp</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    update_ui</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 更新ui</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> update_ui</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    player_hp_progress_bar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">player_hp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中：</p><ul><li><strong>EventBus</strong> 作为全局事件总线，定义了<code>player_hp_changed</code>信号</li><li><strong>Player</strong> 在血量变化时通过<code>EventBus.player_hp_changed.emit(hp)</code>发送信号</li><li><strong>GameManager</strong> 监听该信号，当玩家血量为0时结束游戏</li><li><strong>UI</strong> 同样监听该信号，实时更新血量显示</li></ul><p>可以看到，Player不需要知道GameManager和UI的存在，GameManager和UI也不需要获取Player节点的引用，所有的通信都通过EventBus完成。这种方式使得各个模块之间的耦合度大大降低，代码更加清晰易维护。</p><div class="hint-container tip"><p class="hint-container-title">多个事件总线</p><p>在大型项目中，可以根据功能模块创建多个事件总线，而不是把所有信号都放在一个EventBus中。例如：</p><ul><li><strong>UIEventBus</strong> - 管理UI相关的事件（按钮点击、面板切换等）</li><li><strong>GameEventBus</strong> - 管理游戏逻辑事件（关卡完成、任务触发等）</li><li><strong>AudioEventBus</strong> - 管理音频事件（播放音效、切换BGM等）</li></ul><p>这样可以让代码结构更加清晰，也方便团队协作时的分工管理。</p></div><div class="hint-container warning"><p class="hint-container-title">注意事项</p><p>使用全局事件总线时需要注意：</p><ul><li>避免滥用。不是所有的信号都适合放在事件总线中，只有需要跨场景、跨模块通信的事件才建议使用</li><li>信号命名要清晰，避免命名冲突</li><li>记得在节点销毁时断开不再需要的信号连接，避免内存泄漏</li></ul></div>`,56))])}const g=a(k,[["render",p]]),c=JSON.parse('{"path":"/tutorial/signal.html","title":"信号系统","lang":"zh-CN","frontmatter":{"title":"信号系统","author":"Moshangzhu","date":"2025-10-17T00:00:00.000Z","category":["教程"],"tag":["信号"],"description":"简介 在开发游戏的过程中，往往会出现这样的情况： 玩家受到伤害，需要让血量条发生变化 动画播放结束了，需要用代码控制播放下一个动画 要设置机关，当玩家触碰后激活某处机关 我们可能会有以下思路： 先获得到需要触发变化的节点，然后调用节点上的函数，例如第一种情况在玩家脚本中：get_node(\\"hp_bar\\").update_value(hp_value)...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"信号系统\\",\\"image\\":[\\"https://godotvillage.github.io/assets/images/tutorial/signal/signal_connect_in_editor.png\\",\\"https://godotvillage.github.io/assets/images/tutorial/signal/signal_flags_in_editor.png\\"],\\"datePublished\\":\\"2025-10-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-17T15:47:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Moshangzhu\\"}]}"],["meta",{"property":"og:url","content":"https://godotvillage.github.io/tutorial/signal.html"}],["meta",{"property":"og:site_name","content":"Godot新手村"}],["meta",{"property":"og:title","content":"信号系统"}],["meta",{"property":"og:description","content":"简介 在开发游戏的过程中，往往会出现这样的情况： 玩家受到伤害，需要让血量条发生变化 动画播放结束了，需要用代码控制播放下一个动画 要设置机关，当玩家触碰后激活某处机关 我们可能会有以下思路： 先获得到需要触发变化的节点，然后调用节点上的函数，例如第一种情况在玩家脚本中：get_node(\\"hp_bar\\").update_value(hp_value)..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://godotvillage.github.io/assets/images/tutorial/signal/signal_connect_in_editor.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-17T15:47:15.000Z"}],["meta",{"property":"article:author","content":"Moshangzhu"}],["meta",{"property":"article:tag","content":"信号"}],["meta",{"property":"article:published_time","content":"2025-10-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-17T15:47:15.000Z"}]]},"git":{"createdTime":1760702952000,"updatedTime":1760716035000,"contributors":[{"name":"moshangzhu","username":"moshangzhu","email":"925236118@qq.com","commits":2,"url":"https://github.com/moshangzhu"}]},"readingTime":{"minutes":9.34,"words":2802},"filePathRelative":"tutorial/signal.md","excerpt":"<h2>简介</h2>\\n<p>在开发游戏的过程中，往往会出现这样的情况：</p>\\n<ul>\\n<li>玩家受到伤害，需要让血量条发生变化</li>\\n<li>动画播放结束了，需要用代码控制播放下一个动画</li>\\n<li>要设置机关，当玩家触碰后激活某处机关</li>\\n</ul>\\n<p>我们可能会有以下思路：</p>\\n<ul>\\n<li>先获得到需要触发变化的节点，然后调用节点上的函数，例如第一种情况在玩家脚本中：<code>get_node(\\"hp_bar\\").update_value(hp_value)</code></li>\\n<li>先通知父级节点，然后再想办法通知到对应的节点处理，例如第一种情况在玩家脚本中：<code>get_parent().do_something(hp_value)</code></li>\\n<li>先把自己存放再需要变化的节点的属性里，然后每帧根据玩家的属性，例如第一种情况在玩家脚本中：<code>hp_bar.player = self</code>，然后在血量的process函数中<code>update_value(player.hp_value)</code></li>\\n</ul>\\n<p>很容易发现以上代码中，传输数据是一件很不方便的事情。尤其是我们不可能将所有代码全部放在一个庞大的<code>game.tscn</code>场景文件中，这使得节点之间的交互更是一件复杂的事情。</p>\\n<p>那有什么办法可以简化这种操作呢？或者说，如何将一个事件，和处理这个事件的函数解绑呢？</p>\\n<p>答案是<strong>信号</strong><code>signal</code>。</p>\\n","autoDesc":true}');export{g as comp,c as data};
